{"ast":null,"code":"var _jsxFileName = \"E:\\\\NetflixClone-main\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row(props) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(props.fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [props.fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row_image && ${props.isLargeRow && \"row_large\"}`,\n        src: base_url + (props.isLargeRow ? movie.poster_path : movie.poster_path),\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["E:/NetflixClone-main/src/Row.js"],"names":["React","useState","useEffect","axios","base_url","Row","props","movies","setMovies","fetchData","request","get","fetchUrl","data","results","title","map","movie","isLargeRow","poster_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;;AACA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAChB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeO,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMP,KAAK,CAACQ,GAAN,CAAUL,KAAK,CAACM,QAAhB,CAAtB;AACAJ,MAAAA,SAAS,CAACE,OAAO,CAACG,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOJ,OAAP;AACH;;AACDD,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACH,KAAK,CAACM,QAAP,CAPM,CAAT;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKN,KAAK,CAACS;AAAX;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACKR,MAAM,CAACS,GAAP,CAAWC,KAAK,iBACjB;AAAoB,QAAA,SAAS,EAAG,gBAAeX,KAAK,CAACY,UAAN,IAAoB,WAAY,EAA/E;AAAkF,QAAA,GAAG,EAAEd,QAAQ,IAAEE,KAAK,CAACY,UAAN,GAAkBD,KAAK,CAACE,WAAxB,GAAsCF,KAAK,CAACE,WAA9C,CAA/F;AAA2J,QAAA,GAAG,EAAEF,KAAK,CAACG;AAAtK,SAAUH,KAAK,CAACI,EAAhB;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GArBQhB,G;;KAAAA,G;AAuBT,eAAeA,GAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from \"./axios\"\r\nimport \"./Row.css\"\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row(props) {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(props.fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [props.fetchUrl])\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{props.title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie => \r\n                <img key={movie.id} className={`row_image && ${props.isLargeRow && \"row_large\"}`} src={base_url+(props.isLargeRow? movie.poster_path : movie.poster_path)} alt={movie.name}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}